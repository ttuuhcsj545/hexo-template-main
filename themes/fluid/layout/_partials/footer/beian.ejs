<div class="beian">
  <span>
    <a href="<%= theme.footer.beian.link %>" target="_blank" rel="nofollow noopener">
      <%- theme.footer.beian.icp_text %>
    </a>
  </span>
  <span>
    <a href="/privacy/" target="_blank" >隐私政策</a>
  </span>
  <% if(theme.footer.beian.police_text) { %>
    <% if(theme.footer.beian.police_code) { %>
      <span>
        <a
          href="<%= theme.footer.beian.link %>"
          rel="nofollow noopener"
          class="beian-police"
          target="_blank"
        >
          <% if(theme.footer.beian.police_icon) { %>
            <span style="visibility: hidden; width: 0">|</span>
            <img src="<%= url_for(theme.footer.beian.police_icon) %>" alt="police-icon"/>
          <% } %>
          <span><%- theme.footer.beian.police_text %></span>
        </a>
      </span>
    <% } else { %>
      <span class="beian-police">
        <% if(theme.footer.beian.police_icon) { %>
          <span style="visibility: hidden; width: 0">|</span>
          <img src="<%= url_for(theme.footer.beian.police_icon) %>" alt="police-icon"/>
        <% } %>
        <span class="beian-police"><%- theme.footer.beian.police_text %></span>
      </span>
    <% } %>
  <% } %>

<script>
/**
 * CDN 分流与缓存核心逻辑（异步判断 CDN 并处理多级回退）
 *
 * 该函数使用 Fetch API 异步检测 CDN 的可用性。
 * 如果 CDN 不可用，它会按照优先级列表自动切换到备用 URL。
 * 成功后，它会更新所有指定的图片链接，以避免因 CDN 故障而导致的图片加载失败。
 */
async function getActiveCdnHost() {
    // 定义一个 CDN 优先级列表，可以根据“超市”场景扩展为多个备用 URL
    const hosts = [
        'https://dns.tianzhihao.dpdns.org',
        'https://backup.example.com',
        // 'https://backup2.example.com', // 更多备用 URL
    ];

    // 默认回退域名，防止优先级列表为空或所有域名都失效
    const fallbackHost = 'https://backup.example.com';

    for (const host of hosts) {
        try {
            // 使用 Fetch API 发送一个轻量级的 HEAD 请求来检测 CDN 状态
            const response = await fetch(host, {
                method: 'HEAD',
                mode: 'cors', // 确保 CORS 兼容性
            });

            // 检查响应状态码，确保它在成功的范围内 (200-299)
            if (response.ok) {
                // 如果 CDN 健康，尝试从响应头获取自定义域名
                const platformHeader = response.headers.get('platform');
                // 如果有 platform 头部，则使用它，否则使用当前检测到的 host
                return platformHeader ? platformHeader : host;
            }
        } catch (error) {
            // 网络错误或 CORS 错误会在这里被捕获
            console.error(`CDN check failed for ${host}:`, error);
        }
    }

    // 如果所有 CDN 尝试都失败，返回默认回退域名
    console.warn('All CDN hosts failed, using the final fallback.');
    return fallbackHost;
}

/**
 * 负责更新页面上所有指定图片的 src 属性
 */
function updateImageSources(cdnHost) {
    if (!cdnHost.endsWith('/')) {
        cdnHost += '/';
    }

    // 使用 IntersectionObserver 实现图片的懒加载和按需更新
    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                const originalSrc = img.getAttribute('cll');

                if (originalSrc) {
                    // 确保原始路径以 '/' 开头
                    const cleanSrc = originalSrc.startsWith('/') ? originalSrc.substring(1) : originalSrc;
                    img.src = cdnHost + cleanSrc;
                }

                // 更新完成后停止观察该元素
                observer.unobserve(img);
            }
        });
    }, {
        rootMargin: '0px',
        threshold: 0.1,
    });

    // 找到所有需要更新的图片并开始观察它们
    document.querySelectorAll('img.dynamic-img, img.Article-img').forEach(img => {
        observer.observe(img);
    });
}

// 启动函数：异步获取 CDN 主机并更新图片
getActiveCdnHost().then(cdnHost => {
    updateImageSources(cdnHost);
}).catch(error => {
    console.error('Failed to get active CDN host:', error);
});
</script>
</div>
